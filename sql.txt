1.1 CREATE DATABASE LibraryManagement;

1.2 CREATE TABLE authors (
        id INT AUTO_INCREMENT NOT NULL,
        name VARCHAR(255) NOT NULL,
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


1.3 CREATE TABLE genres (
        id INT AUTO_INCREMENT NOT NULL,
        name VARCHAR(255) NOT NULL,
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


1.4 CREATE TABLE books (
        id INT AUTO_INCREMENT NOT NULL,
        title VARCHAR(255) NOT NULL,
        publication_year YEAR NOT NULL,
        author_id INT NOT NULL,
        genre_id INT NOT NULL,
        INDEX idx_author_id (author_id),
        INDEX idx_genre_id (genre_id),
        CONSTRAINT FK_books_author FOREIGN KEY (author_id) REFERENCES authors (id) ON DELETE CASCADE,
        CONSTRAINT FK_books_genre FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE CASCADE
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


1.5 CREATE TABLE books (
        id INT AUTO_INCREMENT NOT NULL,
        title VARCHAR(255) NOT NULL,
        publication_year YEAR NOT NULL,
        author_id INT NOT NULL,
        genre_id INT NOT NULL,
        INDEX idx_author_id (author_id),
        INDEX idx_genre_id (genre_id),
        CONSTRAINT FK_books_author FOREIGN KEY (author_id) REFERENCES authors (id) ON DELETE CASCADE,
        CONSTRAINT FK_books_genre FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE CASCADE,
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;
1.6 CREATE TABLE users (
        id INT AUTO_INCREMENT NOT NULL,
        username VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


1.7 CREATE TABLE borrowed_books (
        id INT AUTO_INCREMENT NOT NULL,
        book_id INT NOT NULL,
        user_id INT NOT NULL,
        return_date DATE NOT NULL,
        borrow_date DATE NOT NULL,
        INDEX idx_book_id (book_id),
        INDEX idx_user_id (user_id),
        CONSTRAINT FK_borrowed_books_bool FOREIGN KEY (book_id) REFERENCES books (id) ON DELETE CASCADE,
        CONSTRAINT FK_borrowed_books_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
        PRIMARY KEY(id)
) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;




2.1 INSERT INTO authors (name)
VALUES ('Bob'), ('Tom');


2.2 INSERT INTO genres (name)
VALUES ('Mystery'), ('Thriller');


2.3 INSERT INTO books (title, publication_year, author_id, genre_id)
VALUES
        ('The Girl with the Dragon Tattoo', 1993, 1, 1),
        ('Gone Girl', 2001, 1, 1),
        ('The Da Vinci Code', 1988, 2, 2),
        ('The Hound of the Baskervilles', 2010, 2, 2);


2.4 INSERT INTO users (username, email)
VALUES
        ('User 1', 'user1@email.com'),
        ('User 2', 'user2@email.com');

2.5 INSERT INTO borrowed_books (user_id, book_id, borrow_date, return_date)
VALUES
        (1, 2, '2023-05-25', '2023-06-01'),
        (1, 3, '2023-06-02', '2023-06-10'),
        (1, 4, '2023-07-12', '2023-08-13'),
        (2, 2, '2024-01-25', '2024-03-01'),
        (2, 1, '2023-03-25', '2023-04-11');

3. SELECT
        *
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id;

4.1 SELECT
        COUNT(od.id)
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id;

4.2 SELECT
        COUNT(od.id)
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        LEFT JOIN products p ON p.id = od.product_id
        LEFT JOIN suppliers sp ON sp.id = p.supplier_id
        LEFT JOIN categories c ON c.id = p.category_id;


(мій результат не змінився, оскільки рутова таблиця order_details , якби можливо рутова була від `products` чи іншої і не було б замовлення з цим продуктом, то кількість записів в результаті була б більшою, а у значеннях order_details було б null, для цих продуктів)


4.3 SELECT
        COUNT(od.id)
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id
WHERE
        e.employee_id > 3
        AND e.employee_id <= 10;

4.4 SELECT
        c.name,
        COUNT(od.id) AS totalOrdersByCategory,
        ROUND(AVG(od.quantity), 1) AS avgQuantity
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id
GROUP BY
        c.name;

4.5 SELECT
        c.name,
        COUNT(od.id) AS totalOrdersByCategory,
        ROUND(AVG(od.quantity), 1) AS avgQuantity
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id
GROUP BY
        c.name
HAVING
        avgQuantity > 21;

4.6 SELECT
        c.name,
        COUNT(od.id) AS totalOrdersByCategory,
        ROUND(AVG(od.quantity), 1) AS avgQuantity
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id
GROUP BY
        c.name
ORDER BY totalOrdersByCategory DESC;

4.7 SELECT
        c.name,
        COUNT(od.id) AS totalOrdersByCategory,
        ROUND(AVG(od.quantity), 1) AS avgQuantity
FROM
        order_details od
        INNER JOIN orders o ON o.id = od.order_id
        INNER JOIN customers ct ON ct.id = o.customer_id
        INNER JOIN employees e ON e.employee_id = o.employee_id
        INNER JOIN shippers sh ON sh.id = o.shipper_id
        INNER JOIN products p ON p.id = od.product_id
        INNER JOIN suppliers sp ON sp.id = p.supplier_id
        INNER JOIN categories c ON c.id = p.category_id
GROUP BY
        c.name
LIMIT 4 OFFSET 1;